<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>

<?php
$_product    = $this->getProduct();
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());

//start of modification

	//get all the media gallery images associated with this product that has a label
		$_gallery = Mage::getModel('catalog/product')->load($_product->getId())->getMediaGalleryImages();  
		$imgcount = Mage::getModel('catalog/product')->load($_product->getId())->getMediaGalleryImages()->count();
		if($imgcount >1)
		{
			$label_color = array();
			$product_base = array();
			foreach ($_gallery as $_image )
			{
				if(trim($_image['label'])!="")//if image has a label
				{
				 	$label = ucwords($_image['label']);//get the label text of the image
				
					$arr_color = explode('-', $label);//broke the label into an array
					$color = ucwords(trim($arr_color[0]));//get the color value, blue or orange
					$indentifier = ucwords(trim($arr_color[1]));//get image identifier, base or color
						
					if($indentifier=='Color')//if these are the color swatches/thumbnails
					{
						$label_color['color'][] = strval($color);//let's store them to an array
						$label_color['image'][] = strval($this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(35, 35));//small images
					}
					else if($indentifier=='Base')//else this is the product base image
					{
						$product_base['color'][] = strval($color);
						$product_base['image'][] = strval($this->helper('catalog/image')->init($_product, 'thumbnail', $_image->getFile())->resize(304, 273));
					}
				
				}
			}
		}




function findColorImage($value, $arr, $key)
{
	$found = '';
	$total = count($arr[$key]);
	if($total>0)
	{
		for($i=0; $i<$total;$i++)
		{
			if($value == $arr[$key][$i])//if it matches the color listed in the attribute
			{
				$found = $arr['image'][$i];//return the image src
		
			}
		}
	}
	return $found;
	
}


?>

<?php if ($_product->isSaleable() && count($_attributes)):?>
    <dl>
<?php
foreach($_attributes as $_attribute)
{
	if($_attribute->getLabel()== 'Color')//if this is the ref_color attribute
	{
		$attribute = $_product->getResource()->getAttribute('refer_color');//load the configurable attribute here which is the refer_color
		$frontend = $attribute->getFrontend();
		$selectOptions = $frontend->getSelectOptions();	//get the frontend labels and values of this attribute		
		?>
		<div class="color_thumbnails"><br/><div><h4>Color</h4></div>
        <input name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" type="hidden" value="" /><!-- We set a hidden field here to store the value of the color being selected-->
        <?php
		foreach($selectOptions as $refer_color_properties)
		{
			if($refer_color_properties['value']!='')
			{
				$color_image = findColorImage(ucwords(strval($refer_color_properties['label'])),$label_color,'color');
				if($color_image != '')//if there was an color image being returned
				{
					$product_image = findColorImage(ucwords(strval($refer_color_properties['label'])),$product_base,'color');//get find the product base image for this color
				?>
					<div id="<?php echo $refer_color_properties['label']; ?>"  onmouseout="style.borderColor='transparent'" class="inlinebox <?php echo $refer_color_properties['label']; ?>" onclick="colorSelected('attribute<?php echo $_attribute->getAttributeId() ?>','<?php echo $refer_color_properties['value'];?>','<?php echo $product_image; ?>','<?php echo $refer_color_properties['label'];?>')">
                <?php //display color image
					echo "<img src='".$color_image."' alt='".$refer_color_properties['label']."'/>";
				?>
                	</div>
                <?php
				}
			}
		}
		?>
		</div>
        <?php
	}
	else//display other attributes
	{?>
		  <dt><label><?php echo $_attribute->getLabel();?><span class="required">&nbsp;*</span></label></dt>
        <dd<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
          <select name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select">
            <option><?php echo $this->__('Choose an Option...') ?></option>
          </select>
        </dd>
        <?php
	}
}



?>
 </dl>
    <script type="text/javascript">
        var spConfig = new Product.Config(<?php echo $this->getJsonConfig() ?>);
    </script>
<?php endif;

//end of modification

?>


